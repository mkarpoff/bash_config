#!/bin/env bash
# Prompt function because PROMPT_COMMAND is awesome

# Exit if not in interactive mode
if [[ $- != *i* ]]; then
	exit 0
fi

# Enable git directory checks by default. This can slow down bash if the git
# directory is huge
if [[ -z "${GIT_PS1}" ]]; then
	export GIT_PS1=1
fi
if [[ -z "${GIT_PS1_TIMEOUT}" ]]; then
	export GIT_PS1_TIMEOUT=0.200
fi

# Set the terminal window to be the path and last cmd used
#trap 'echo -ne "\033]2;${USER}@${HOSTNAME}:${PWD} {$(history 1 | sed "s/^[ ]*[0-9]*[ ]*//g")}:.\007"' DEBUG
trap 'echo -ne "\033]2;${PWD##*/} [$(history 1 | sed "s/^[ ]*[0-9]*[ ]*//g")]\007"' DEBUG

# The symbols to use in the PS1
declare -A syms=( [RA]='' [RB]='' [LB]='' [LA]='' [BRANCH]='' [CLEAN]='√' [DIRTY]='×' [LOCAL]='Δ' [STASH]='→' [AHEAD]='↑' [BHIND]='↓' )
#declare -A syms=( [RA]='' [RB]='' [LB]='' [LA]='' [BRANCH]='' [CLEAN]='✓√○' [DIRTY]='✗●×' [LOCAL]='Δ←◄' [STASH]='☇→►◌' [AHEAD]='↑▲' [BHIND]='↓▼' )

# Check if 256 color pallet is available
if (( $(tput colors) == 256 )); then
	declare -A colors=(
		[TERMBLKF]="\\[$(tput sgr0)\\]"
		[TERMBLKB]="\\[$(tput sgr0)\\]"
		[BLKF]="\\[$(tput setaf  236)\\]"
		[BLKB]="\\[$(tput setab  236)\\]"
		[REDF]="\\[$(tput setaf  160)\\]"
		[REDB]="\\[$(tput setab  160)\\]"
		[GREF]="\\[$(tput setaf  70)\\]"
		[GREB]="\\[$(tput setab  70)\\]"
		[YELF]="\\[$(tput setaf  178)\\]"
		[YELB]="\\[$(tput setab  178)\\]"
		[BLUF]="\\[$(tput setaf  32)\\]"
		[BLUB]="\\[$(tput setab  32)\\]"
		[PRPF]="\\[$(tput setaf  96)\\]"
		[PRPB]="\\[$(tput setab  96)\\]"
		[AQUF]="\\[$(tput setaf  37)\\]"
		[AQUB]="\\[$(tput setab  37)\\]"
		[GRYF]="\\[$(tput setaf  240)\\]"
		[GRYB]="\\[$(tput setab  240)\\]"
		)
else
	declare -A colors=(
		[BLKF]="\\[$(tput setaf  0)\\]"
		[BLKB]="\\[$(tput setab  0)\\]"
		[REDF]="\\[$(tput setaf  1)\\]"
		[REDB]="\\[$(tput setab  1)\\]"
		[GREF]="\\[$(tput setaf  2)\\]"
		[GREB]="\\[$(tput setab  2)\\]"
		[YELF]="\\[$(tput setaf  3)\\]"
		[YELB]="\\[$(tput setab  3)\\]"
		[BLUF]="\\[$(tput setaf  4)\\]"
		[BLUB]="\\[$(tput setab  4)\\]"
		[PRPF]="\\[$(tput setaf  5)\\]"
		[PRPB]="\\[$(tput setab  5)\\]"
		[AQUF]="\\[$(tput setaf  6)\\]"
		[AQUB]="\\[$(tput setab  6)\\]"
		[GRYF]="\\[$(tput setaf  8)\\]"
		[GRYB]="\\[$(tput setab  8)\\]"
		)
fi

# Nested shell level
if (( SHLVL != 1 )); then
	readonly shlvl="${colors[GRYB]} ${SHLVL} ${colors[GRYF]}"
else
	readonly shlvl="${colors[GRYF]}${colors[GRYB]} "
fi

# Display Username
readonly usrin="${colors[GREB]}${syms[RA]}${colors[BLKF]} ${HOSTNAME}  ${colors[GREF]}"
readonly clock="${colors[GREF]}${colors[BLKB]}${LA}${colors[GREB]}${colors[BLKF]} \\@"
readonly ps1_2="${colors[TERMBLKB]}${colors[GRYF]}${syms[RA]}\\[$(tput el)$(tput sgr0)\\]"
git_dirty() {
	local dirty
	dirty=$(timeout $GIT_PS1_TIMEOUT git status --porcelain 2>/dev/null )
	if (( $? == 124 )); then
		echo "${colors[BLKF]} ?${syms[LOCAL]}"
		return
	fi
	if [[ "$dirty" != "" ]]; then
		echo "${colors[REDF]}${syms[DIRTY]} $(wc -l <<< "$dirty")${syms[LOCAL]}"
	else
		echo "${colors[GREF]}${syms[CLEAN]} "
	fi
}

git_stash() {
	local stash
	stash="$(timeout $GIT_PS1_TIMEOUT git stash list 2>/dev/null)"
	if (( $? == 124 )); then
		echo "?${syms[STASH]}"
		return
	fi
	if [[ "$stash" != "" ]]; then
		echo "$(wc -l <<< "$stash")${syms[STASH]}"
	fi
}

git_ahead() {
	local ahead
	ahead="$(timeout $GIT_PS1_TIMEOUT git rev-list "@{u}..HEAD" 2>/dev/null)"
	if (( $? == 124 )); then
		echo "?${syms[AHEAD]}"
		return
	fi
	if [[ "$ahead" != "" ]]; then
		echo "$(wc -l <<< "$ahead")${syms[AHEAD]}"
	fi
}

git_behind() {
	local behind
	behind="$(timeout $GIT_PS1_TIMEOUT git rev-list "HEAD..@{u}" 2>/dev/null)"
	if (( $? == 124 )); then
		echo "?${syms[BHIND]}"
	fi
	if [[ "$behind" != "" ]]; then
		echo "$(wc -l <<< "$behind")${syms[BHIND]}"
	fi
}

git_prompt() {
	# GIT STUFF
	local git_repo_name branch
	if (( GIT_PS1 == 0 )); then
		return
	fi
	git_repo_name=$(basename "$(git rev-parse --show-toplevel 2>/dev/null)" 2>/dev/null)
	if [[ "$git_repo_name" == '' ]] ; then
		return 0
	fi
	branch=$(timeout $GIT_PS1_TIMEOUT git symbolic-ref HEAD 2>/dev/null )
	branch=${branch#refs/heads/}
	echo "${colors[YELB]}${syms[RA]}${colors[BLKF]} ${syms[BRANCH]}${git_repo_name}:${branch}$(git_dirty &)$(git_stash &)$(git_ahead &)$(git_behind &)${colors[YELF]}"
}

set_prompt() {
	local branch venv path

	branch=$(git_prompt &)

	# Virtual Env stuff
	if [[ ! -z $VIRTUAL_ENV ]]; then
		venv="${colors[PRPB]}${syms[RA]}${colors[BLKF]} ${VIRTUAL_ENV##*/}  ${colors[PRPF]}"
	else
		venv=''
	fi

	# Check to make sure the path isn't going to run over the clock. Will display
	# current directory and parent directory if it will run over the clock
	path="${colors[BLUB]}${syms[RA]}${colors[BLKF]} \w ${colors[BLUF]}"

	PS1="\\[$(tput el1)$(tput cub "$(tput cols)")$(tput hpa 0)\\]${shlvl}${usrin}${branch}${venv}${path}${colors[TERMBLKB]}${colors[BLUF]}${syms[RA]}\\[$(tput sgr0)\\]\\r\\n\\[$(tput el)\\]${ps1_2}"
	export PS1
}

PS2="\\[$(tput el)\\]${ps1_2}"
PROMPT_COMMAND=set_prompt

export PS2
export PROMPT_COMMAND
